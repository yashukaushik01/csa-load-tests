on: 
  workflow_dispatch:
    inputs:
      env:
        description: 'The environment to run within visible API'
        type: choice
        options:
        - sandbox
      execution_type:
        description: 'Define type of execution'
        type: choice
        options:
          - iterations
          - vus
      iterations:
        description: 'The number of requests (iterations) to be executed (required field for execution type iterations)'
        default: '1'
        type: string
        required: false
      durationSeconds:
        description: 'The duration of execution in seconds/minutes/hours (examples 1s/1m/1h)'
        default: '1s'
        type: string
        required: true
      threads:
        description: 'The number of threads (VUS) to run with (concurrent executions) (required field for execution type vus)'
        default: '1'
        type: string
        required: false
      octRatesEndpoint:
          description: 'The OCT-Rates-Api Endpoint'
          type: string
          required: true
      apiKey:
        description: 'The OCT-Rates-Api Key'
        type: string
        required: true

jobs:
  k6_forward_label:
    name: K6 OCT-Rates-Api Test Runner
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    container: docker://golang:1.19-alpine

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          touch .env
          echo "OCT_RATES_API_KEY=${{ inputs.apiKey }}" >> .env
          echo "ECL_OCT_API_BASE_URL=${{ inputs.octRatesEndpoint }}" >> .env


      - name: Create config.json file for ${{inputs.execution_type}} execution type
        run: |
              rm config.json
              touch config.json
              if [ '${{ inputs.execution_type }}' == 'iterations' ]; then
              echo "{
                \"scenarios\": {
                  \"example_scenario\": {
                    \"executor\": \"constant-arrival-rate\",
                    \"rate\": ${{ inputs.iterations }},
                    \"timeUnit\": \"${{ inputs.durationSeconds }}\",
                    \"duration\": \"${{ inputs.durationSeconds }}\",
                    \"preAllocatedVUs\": 1,
                    \"maxVUs\": 15000
                  }
                }
              }" >> config.json
              elif [ '${{ inputs.execution_type }}' == 'vus' ]; then
              echo "{
                \"vus\": ${{ inputs.threads }},
                \"duration\": \"${{ inputs.durationSeconds }}\"
              }" >> config.json
              fi

      - name: Install xk6
        run: go install go.k6.io/xk6/cmd/xk6@latest
      
      - name: Build xk6 binary
        run: xk6 build --with github.com/szkiba/xk6-dotenv@latest --with github.com/avitalique/xk6-file@latest --replace go.buf.build/grpc/go/prometheus/prometheus=buf.build/gen/go/prometheus/prometheus/protocolbuffers/go@latest --replace go.buf.build/grpc/go/gogo/protobuf=buf.build/gen/go/gogo/protobuf/protocolbuffers/go@latest

      - name: Run k6 return label test
        run: ./k6 run --config config.json --env ENV=${{ inputs.env }} load_tests_scripts/us_post_rates.js
        # Enable HTTP Debugging
        # run: ./k6 --config config.json --env ENV=${{ inputs.env }} --http-debug="full" load_tests_scripts/us2_post_shipping_return_label.js